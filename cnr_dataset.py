import os
import os.path as osp
from pathlib import Path

import numpy as np
import pandas as pd
import torch
from pydgn.data.dataset import InMemoryDataset, DatasetInterface
from torch_geometric.data import Data


class CNRMalwareDataset(InMemoryDataset, DatasetInterface):
    """
    Uses base version of graphs for now
    """
    def __init__(self, root, name, binary_classification=False, use_node_features=True, transform=None, pre_transform=None):
        self.malware_classes = ['Airpush', 'Dowgin', 'FakeInst', 'Kuguo', 'Youmi', 'Fusob', 'Mecor']
        self.trusted_classes = ['Trusted']
        self.name = name
        self.use_node_features = use_node_features
        super(CNRMalwareDataset, self).__init__(root, transform, pre_transform)
        #print("Loading dataset..")
        self.data, self.slices = torch.load(self.processed_paths[0])
        self.data.y = self.data.y.long()
        #print("Dataset Loaded.")

    @property
    def raw_file_names(self):
        files_list = []
        for malware_class in self.malware_classes:
            malware_folder = Path(self.root) / Path(self.name) / Path(malware_class)
            for dir in os.listdir(malware_folder):
                node_file = malware_folder / Path(dir) / Path('nodes.txt')
                edge_file = malware_folder / Path(dir) / Path('edges.txt')
                files_list.append(node_file)
                files_list.append(edge_file)
        for trusted_class in self.trusted_classes:
            trusted_folder = Path(self.root) / Path(self.name) / Path(trusted_class)
            for dir in os.listdir(trusted_folder):
                node_file = trusted_folder / Path(dir) / Path('nodes.txt')
                edge_file = trusted_folder / Path(dir) / Path('edges.txt')
                files_list.append(node_file)
                files_list.append(edge_file)
        return files_list

    @property
    def processed_file_names(self):
        return ['data.pt']

    @property
    def processed_dir(self):
        return osp.join(self.root, self.name, 'processed')

    @property
    def raw_dir(self):
        return osp.join(self.root, self.name, 'raw')

    def download(self):
        pass

    def _process_node_file(self, file):
        d = np.load(file)
        x = torch.tensor(d[:, 1:])  # remove id column
        return x.float()

    def _process_edge_file(self, file):
        d = np.load(file)
        df = pd.DataFrame(d)
        sorted = df.sort_values([df.columns[0], df.columns[1]])
        edge_index = torch.tensor(sorted.values, dtype=torch.int64).t()  # remove id column
        # edge index has shape (2, num_edges)
        return edge_index - 1 # index should start from 0

    def process(self):

        # Read data into huge `Data` list.
        data_list = []

        completed = 0
        for i, malware_class in enumerate(self.malware_classes):
            y = torch.ones(1)*i
            malware_folder = Path(self.root) / Path(self.name) / Path(malware_class)
            for dir in os.listdir(malware_folder):
                try:
                    node_file = malware_folder / Path(dir) / Path('nodes.npy')
                    edge_file = malware_folder / Path(dir) / Path('edges.npy')

                    x = self._process_node_file(node_file)
                    obf = torch.ones(1) if 'OBF' in dir else torch.zeros(1)
                    edge_index = self._process_edge_file(edge_file)
                    if self.use_node_features:
                        data_list.append(Data(x=x, edge_index=edge_index, y=y, obf=obf))
                    else:
                        data_list.append(Data(edge_index=edge_index, y=y, obf=obf))
                    completed += 1
                except Exception as e:
                    print(f'Ignoring {dir}')
                    print(e)
                if completed % 100 == 0:
                    print(f'Completed: {completed}')

        for trusted_class in self.trusted_classes:
            y = torch.ones(1)*len(self.malware_classes)
            trusted_folder = Path(self.root) / Path(self.name) / Path(trusted_class)
            for dir in os.listdir(trusted_folder):
                try:
                    node_file = trusted_folder / Path(dir) / Path('nodes.npy')
                    edge_file = trusted_folder / Path(dir) / Path('edges.npy')
                    x = self._process_node_file(node_file)
                    obf = torch.ones(1) if 'OBF' in dir else torch.zeros(0)
                    edge_index = self._process_edge_file(edge_file)
                    if self.use_node_features:
                        data_list.append(Data(x=x, edge_index=edge_index, y=y, obf=obf))
                    else:
                        data_list.append(Data(edge_index=edge_index, y=y, obf=obf))
                    completed += 1
                except Exception as e:
                    print(f'Ignoring {dir}')
                    print(e)
                if completed % 100 == 0:
                    print(f'Completed: {completed}')

        print(f'Completed: {completed}')

        if self.pre_filter is not None:
            data_list = [data for data in data_list if self.pre_filter(data)]

        if self.pre_transform is not None:
            data_list = [self.pre_transform(data) for data in data_list]

        print('Final number of examples:', len(data_list))

        data, slices = self.collate(data_list)
        torch.save((data, slices), self.processed_paths[0])

    @property
    def dim_node_features(self):
        if not self.use_node_features:
            return 1
        return self.data.x.shape[1]

    @property
    def dim_edge_features(self):
        if self.data.edge_attr is not None:
            return self.data.edge_attr.shape[1]
        return 0

    @property
    def dim_target(self):
        return 8
