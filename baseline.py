import torch
from torch.nn import Sequential, Linear, ReLU
from torch_geometric.nn import global_add_pool, global_mean_pool


class Baseline(torch.nn.Module):

    def __init__(self, dim_node_features, dim_edge_features, dim_target, predictor_class, config):
        super(Baseline, self).__init__()

        self.dim_node_features = dim_node_features
        self.dim_edge_features = dim_edge_features
        self.dim_target = dim_target

        hidden_units = config['hidden_units']
        self.fc_global = Sequential(Linear(dim_node_features, hidden_units), ReLU(), Linear(hidden_units, hidden_units))
        self.out = torch.nn.Linear(hidden_units, dim_target)
        if config['readout'] == 'sum':
            self.readout = global_add_pool
        elif config['readout'] == 'mean':
            self.readout = global_mean_pool

    def forward(self, data):
        x = data.x.float()
        h = self.fc_global(x)
        o = self.readout(h, data.batch)
        out = self.out(o)
        return out, h
